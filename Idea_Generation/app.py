from flask import Flask, render_template, request, session,redirect,url_for
from itertools import product
import openai
import random
import re
import numpy as np

app = Flask(__name__)
app.secret_key = 'mitas30'
openai.api_key = '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'
#10roopでもかなり時間がかかる(5分程度)
max_roop=8
selection1=10
selection2=8

def split(s, delim=' '):
    return s.split(delim)

def generate_combinations(para2):
    a_para2 = para2.strip().split('\n')

    parameters = [split(para)[:-1] for para in a_para2]

    # Create a list of all combinations
    combinations = [' '.join(combination) for combination in product(*parameters)]

    return combinations

def cos_sim(v1, v2):
    return np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))

@app.route('/', methods=['GET', 'POST'])
def form():
    if request.method == 'POST':
        problem = request.form.get('user_input')
        #part0 問題文の変換
        print('\nstep1 問題文の変換:')
        response = openai.ChatCompletion.create(model="gpt-3.5-turbo-0613",
        messages=[
            {"role": "system", "content": "あなたは，課題の核心を見つけることが上手なアドバイザーです。"},
            {"role": "user", "content": "(Problem)を、「どんな方法で...する,できるだろうか？」の形式に変えてください。Problem:深刻な環境問題"},
            {"role": "assistant", "content": "どんな方法で、深刻な環境問題を解決できるだろうか？"},
            {"role": "user", "content": "(Problem)を、「どんな方法で...する,できるだろうか？」の形式に変えてください。Problem:地球温暖化を止める方法は?"},
            {"role": "assistant", "content": "どんな方法で地球温暖化を止められるだろうか"},
            {"role": "user", "content": "(Problem)を、「どんな方法で...する,できるだろうか？」の形式に変えてください。Problem:ストレスマネジメントに苦戦している"},
            {"role": "assistant", "content": "どんな方法でストレスマネジメントを行えるだろうか？"},
            {"role": "user", "content": "(Problem)を、「どんな方法で...する,できるだろうか？」の形式に変えてください。Problem:食費を節約する方法を知りたい"},
            {"role": "assistant", "content": "どんな方法で食費を節約できるだろうか？"},
            {"role": "user", "content": f"(Problem)を、「どんな方法で...する,できるだろうか？」の形式に変えてください。Problem:{problem}"}
            ], temperature=1.0)
        prompt=response.choices[0].message.content
        print(prompt)
        session['prompt']=prompt
        #part1-1 パラメータ作成
        print('\nstep2-1 課題に内在するパラメータの探索:')
        response = openai.ChatCompletion.create(model="gpt-3.5-turbo-0613",
        messages=[
            {"role": "system", "content": "あなたは，創造力が豊かで、アイデアを出す仕事に就いています。また、あなたは物事の抽象化が得意です。"},
            {"role": "user", "content": '''どんな方法でランドリーバスケットのデザインを改良できるだろうか？\n以下のガイドラインを実行してください。
             1.問題を構成するパラメータをいくつか取り出してください。パラメータの選定基準は，「もしもこのパラメータがないとしたら，果たしてこの課題はそもそも存在するだろうか」です。
             2.1.で決定した各パラメータに対して，発想力を働かせてできる限りのバリエーションを発見してください。ただし、出力の形式を厳密に守って出力してください。また、パラメータとバリエーションは共に単語が好ましいです。
             出力形式：パラメータ1 パラメータ2..パラメータx\n(パラメータ1に対する)バリエーション1 バリエーション2..バリエーションk quit\n..\n(パラメータxに対する)バリエーション1 バリエーション2..バリエーションk quit\n'''},
            {"role": "assistant", "content": "材料 形状 仕上げ 置き場所\n枝編み細工 プラスチック 紙 金属 網 quit\n正方形 円柱 長方形 六角形 立方体 quit\n自然 彩色 透明 反射 ネオン quit\n床置き 天井吊り下げ 壁付け 地下室の入り口 ドア掛け quit\n"},
            {"role":"user","content":f'''{prompt}\n以下のガイドラインを実行してください。
             1.問題を構成するパラメータをいくつか取り出してください。パラメータの選定基準は，「もしもこのパラメータがないとしたら，果たしてこの課題はそもそも存在するだろうか」です。
             2.1.で決定した各パラメータに対して，発想力を働かせてできる限りのバリエーションを発見してください。ただし、出力の形式を厳密に守って出力してください。また、パラメータとバリエーションは共に単語が好ましいです。
             出力形式：パラメータ1 パラメータ2..パラメータx\n(パラメータ1に対する)バリエーション1 バリエーション2..バリエーションk quit\n..\n(パラメータxに対する)バリエーション1 バリエーション2..バリエーションk quit\n'''}
        ], temperature=1.0)
        #str型
        ideas = response.choices[0].message.content
        tempstr,para=ideas.split('\n',1)
        #para_listはlist<str>で['a b c d','a b c d']の形式
        para_list=generate_combinations(para)
        para_sum=len(para_list)
        rands=[]
        count=0
        idea_str=''
        idea_list=[]
        #part2-2 アイデア作成
        print('\nstep2-2 アイデア・ボックスによるアイデアの作成:')
        while count<max_roop:
            rands.append(random.randint(0,para_sum-1))
            count+=1
        count=0
        while count<max_roop:
            print(count+1,'周目')
            response = openai.ChatCompletion.create(model="gpt-3.5-turbo-0613",
                messages=[
                    {"role": "system", "content": 'あなたは，創造力が豊かで、アイデアを出す仕事に就いています。できるだけ独創性の高いアイデアを出すことが求められています。'},
                    {"role": "user", "content": '''以下の(Parameters)を備えた(Problem)を解決するアイデアを5個考えて、また、その詳細を1行で教えてください。なるべく独創性の高いアイデアを生み出すことが望まれています。
                    Problem:新しいランドリーバスケットのデザインには何があるだろうか？Parameters:網 円筒形 彩色あり ドア掛け'''},
                    {"role": "assistant", "content": """'多次元彩色ネットバスケット:円筒形のネットを用いて3D彩色パターンを作成。各層には異なる色を塗り、積み重ねることで美しい色彩効果が生まれます。ドア掛けタイプのデザインで省スペース。',
'チェンジングカラーネットバスケット:ネットのマテリアルに色が変わる繊維を使用。洗濯物の重さに応じて色が変わる設計。円筒形で、ドアの裏側に掛けることができます。',
'ネオンネットバスケット:ネオン色のネット素材を使って洗濯物を楽しく。暗闇でも明るく輝くデザイン。ドアに掛けられる円筒形。',
'アートネットバスケット:洗濯物が色とりどりの「アート」に見えるように、透明なネット素材を使用。掛ける位置を調整可能なフック付きで、ドア掛けにも対応。',
'グラデーションネットバスケット:ネットが上から下にかけて彩色されているデザイン。色の移行が洗濯物の量を視覚的に表現。ドア掛け可能な円筒形デザイン。'"""},
                    {"role": "user", "content": '''以下の(Parameters)を備えた(Problem)を解決するアイデアを5個考えて、また、その詳細を1行で教えてください。なるべく独創性の高いアイデアを生み出すことが望まれています。
                    Problem:情報技術を用いて人々の感情を豊かにするにはどうすればよいか？Parameters:カラフル 悲しい ボイスオーバー ユーザーインターフェース'''},
                    {"role": "assistant", "content": """'エモーションモジュレーター:カラフルなデバイスがユーザーの感情に応じて変化し、悲しい時には明るい色と音声メッセージを提供する。ユーザーインターフェースに統合。',
'感情音声アシスタント:悲しい状況に対応する音声アシスタント。ユーザーが悲しいと感じる時に励ましのメッセージや曲を再生し、ユーザーインターフェース上で表示。',
'感情反応ゲーム:ユーザーが悲しい状況にあるときに自分の感情を豊かにするためのゲーム。カラフルなデザインで、ユーザーインターフェースを通じて操作可能。',
'エモーションレコメンダー:ユーザーの感情を分析し、カラフルなグラフィックや音声メッセージを提供する。ユーザーインターフェースを通じてカスタマイズ可能。',
'感情共有プラットフォーム:ユーザーが自分の感情を表現し、共有できるプラットフォーム。カラフルなデザインで、ボイスオーバー機能を備えたユーザーインターフェース。'"""},
                    {"role":"user","content":f'''以下の(Parameters)を備えた(Problem)を解決するアイデアを5個考えて、また、その詳細を1行で教えてください。なるべく独創性の高いアイデアを生み出すことが望まれています。
                    Problem:{prompt}Parameters:{para_list[rands[count]]}'''}
                ], temperature=1.0)
            count+=1
            ideas=response.choices[0].message.content
            idea_str=idea_str+ideas
        idea_list=idea_str.split(',')
        idea_list=[x.replace("'","").replace("\n","") for x in idea_list]
        splitted_lists = [idea_list[i:i + 5] for i in range(0, len(idea_list), 5)]
        #part3-1 アイデア評価
        print('\nstep3-1 アイデアの評価(max30点):')
        evaluates=''
        response=openai.ChatCompletion.create(model="gpt-3.5-turbo-16k-0613",
            messages=[
                    {"role": "system", "content": '''あなたは、私のアイデアを公正に評価することが求められている、アイデアの評価者で、発想力が高いです。
評価基準は厳格で、自分が考えたことがあるレベルのアイデアであれば評価を「良い」とします。1が最低評価、10が最高評価で、「良い」は6です。'''},
                    {"role": "user", "content": '''Guidelineを実行してください。Guideline:1.(Idea)に記載された(issue)を解決するアイデアのリストを確認してください。
各アイデアは「アイデア名1:説明1,アイデア名2:説明2,..」のように区切られているので、どこまでが1つのアイデアなのか自動で判断してください。
2.(Issue)の記述から、アイデアの質を判断する評価基準をいくつか決めて出力してください。また、それぞれの基準の簡潔な説明を1行で添えてください。
評価基準は最大6つまでとし、代表的なものを選んでください。評価基準には必ず総合評価、独創性、実現可能性を含めてください。総合評価は、他の全ての評価を考慮して決定してください。つまり、独創性5、実現可能性7のときは総合評価=(5+7)/2=6ということです。
3.2.で出力した基準に基づいて(Idea)のアイデアを1から10まで評価してください。また、総合評価も1から10までの10段階で行ってください。評価は(Evaluate)に基づいて行ってください。
Issue:情報技術を用いて人々の感情を豊かにするにはどうすればよいか？
Idea:['感情シェアステッカー:スマートフォンに貼ることがで きるステッカーで感情を表現する。嗅覚カプセルが内蔵されており、特定の香りを放出。カラフルなデザインで感情を視覚化。', '感情リアルタイムフィードバック:スマートフォン のバイオメトリクスセンサーを使用して、ユーザーの感情をリアルタイムに分析し、香りやカラフルなディスプレイを用いたフィードバックを提供。', '感情音楽プレーヤー:スマー トフォン上で再生される音楽をユーザーの感情に合わせて自動的に調整。バイオメトリクスセンサーを使用して感情を検出し、香りやカラフルなディスプレイと組み合わせて感情を表現。', '感情分析SNSアプリ:スマートフォン上で感情を自動的に分析し、ユーザーの感情をカラフルなインターフェースで表示。バイオメトリクスセンサーと連携してリアルタイムの感情共有が可能。エモーショナルVR:VRヘッドセットを使用して、感情認識技術と音声ガイ ドを組み合わせ、プロフェッショナルに設計された仮想現実体験を提供。', 'バイオメトリクスインタラクション:感情認識とバイオメトリックデータを活用し、ユーザーがVR内で特 定の動作をすることによって感情が反映されるインタラクションを提供。']
Evaluate:1.非常に悪い 2.悪い 3.やや悪い 4.普通 5.やや良い 6.良い 7.とても良い 8.素晴らしい 9.非常に素晴らしい 10.類稀なる素晴らしさ'''},
                    {"role": "assistant", "content": '''評価基準:1.総合評価: 各基準を総合して、そのアイデアが全体的にどの程度良いと思われるかを評価します。2.独創性: アイデアが他の既存のアイデアとはどの程度異なり、新規性があるかを評価します。3.実現可能性: 現行の技術やリソースを用いて、そのアイデアがどの程度実現可能かを評価します。
4.感情的影響力: アイデアがどの程度、人々の感情を豊かにすることに直接的に影響を与えるかを評価します。5.ユーザーエンゲージメント: アイデアがどの程度ユーザーの関与を促し、ユーザーが積極的に参加するかを評価します。6.ユーザーエクスペリエンス: アイデアが提供する全体的な体験がどの程度ユーザーにとって良好かを評価します。
Evaluation:
感情シェアステッカー:スマートフォンに貼ることがで きるステッカーで感情を表現する。嗅覚カプセルが内蔵されており、特定の香りを放出。カラフルなデザインで感情を視覚化。
総合評価6、独創性7、実現可能性7、感情的影響力6、ユーザーエンゲージメント5、ユーザーエクスペリエンス6
感情リアルタイムフィードバック:スマートフォン のバイオメトリクスセンサーを使用して、ユーザーの感情をリアルタイムに分析し、香りやカラフルなディスプレイを用いたフィードバックを提供。 
総合評価7、独創性6、実現可能性8、感情的影響力7、ユーザーエンゲージメント7、ユーザーエクスペリエンス7
感情音楽プレーヤー:スマー トフォン上で再生される音楽をユーザーの感情に合わせて自動的に調整。バイオメトリクスセンサーを使用して感情を検出し、香りやカラフルなディスプレイと組み合わせて感情を表現。 
総合評価8、独創性8、実現可能性7、感情的影響力8、ユーザーエンゲージメント8、ユーザーエクスペリエンス8
感情分析SNSアプリ:スマートフォン上で感情を自動的に分析し、ユーザーの感情をカラフルなインターフェースで表示。バイオメトリクスセンサーと連携してリアルタイムの感情共有が可能。
総合評価7、独創性7、実現可能性8、感情的影響力8、ユーザーエンゲージメント7、ユーザーエクスペリエンス7
エモーショナルVR:VRヘッドセットを使用して、感情認識技術と音声ガイ ドを組み合わせ、プロフェッショナルに設計された仮想現実体験を提供。
総合評価9、独創性9、実現可能性7、感情的影響力9、ユーザーエンゲージメント8、ユーザーエクスペリエンス9
バイオメトリクスインタラクション:感情認識とバイオメトリックデータを活用し、ユーザーがVR内で特 定の動作をすることによって感情が反映されるインタラクションを提供。
総合評価8、独創性8、実現可能性8、感情的影響力8、ユーザーエンゲージメント9、ユーザーエクスペリエンス8'''},
                    {"role":"user","content":f'''Guidelineを実行してください。Guideline:1.(Idea)に記載された(issue)を解決するアイデアのリストを確認してください。
各アイデアは「アイデア名1:説明1,アイデア名2:説明2,..」のように区切られているので、どこまでが1つのアイデアなのか自動で判断してください。
2.(Issue)の記述から、アイデアの質を判断する評価基準をいくつか決めて出力してください。また、それぞれの基準の簡潔な説明を1行で添えてください。
評価基準は最大6つまでとし、代表的なものを選んでください。評価基準には必ず総合評価、独創性、実現可能性を含めてください。総合評価は、他の全ての評価を考慮して決定してください。つまり、独創性5、実現可能性7のときは総合評価=(5+7)/2=6ということです。
3.2.で出力した基準に基づいて(Idea)のアイデアを1から10まで評価してください。また、総合評価も1から10までの10段階で行ってください。評価は(Evaluate)に基づいて行いましょう。
Issue:{prompt}
Idea:{splitted_lists[0]}
Evaluate:1.非常に悪い 2.悪い 3.やや悪い 4.普通 5.やや良い 6.良い 7.とても良い 8.素晴らしい 9.非常に素晴らしい 10.類稀なる素晴らしさ'''}
])
        evaluate=response.choices[0].message.content
        eval_item = re.sub("\d+\.", "", evaluate.split("Evaluation:")[0]).lstrip('評価基準:').replace('\n','')
        evaluates+=evaluate.split("Evaluation:")[1]
        #2周目以降
        count=1
        while count<len(splitted_lists):
            response=openai.ChatCompletion.create(model="gpt-3.5-turbo-16k-0613",
            messages=[
                    {"role": "system", "content": '''あなたは、私のアイデアを公正に評価することが求められている、アイデアの評価者で、発想力が高いです。
評価基準は厳格で、自分が考えたことがあるレベルのアイデアであれば評価を「良い」とします。1が最低評価、10が最高評価で、「良い」は6です。'''},
                    {"role": "user", "content": '''Guidelineを実行してください。Guideline:1.(Idea)に記載された(issue)を解決するアイデアのリストを確認してください。
各アイデアは「アイデア名1:説明1,アイデア名2:説明2,..」のように区切られているので、どこまでが1つのアイデアなのか自動で判断してください。
2.(eval_item)に基づいて(Idea)のアイデアを1から10まで評価してください。また、総合評価も1から10までの10段階で行ってください。評価は(Evaluate)に基づいて行ってください。ただし総合評価は、他の全ての評価を考慮して決定してください。つまり、独創性5、実現可能性7のときは総合評価=(5+7)/2=6ということです。
Issue:情報技術を用いて人々の感情を豊かにするにはどうすればよいか？
eval_item:総合評価: 各基準を総合して、そのアイデアが全体的にどの程度良いと思われるかを評価します。独創性: アイデアが他の既存のアイデアとはどの程度異なり、新規性があるかを評価します。実現可能性: 現行の技術やリソースを用いて、そのアイデアがどの程度実現可能かを評価します。感情的影響力: アイデアがどの程度、人々の感情を豊かにすることに直接的に影響を与えるかを評価します。ユーザーエンゲージメント: アイデアがどの程度ユーザーの関与を促し、ユーザーが積極的に参加するかを評価します。ユーザーエクスペリエンス: アイデアが提供する全体的な体験がどの程度ユーザーにとって良好かを評価します。
Idea:['感情シェアステッカー:スマートフォンに貼ることがで きるステッカーで感情を表現する。嗅覚カプセルが内蔵されており、特定の香りを放出。カラフルなデザインで感情を視覚化。', '感情リアルタイムフィードバック:スマートフォン のバイオメトリクスセンサーを使用して、ユーザーの感情をリアルタイムに分析し、香りやカラフルなディスプレイを用いたフィードバックを提供。', '感情音楽プレーヤー:スマー トフォン上で再生される音楽をユーザーの感情に合わせて自動的に調整。バイオメトリクスセンサーを使用して感情を検出し、香りやカラフルなディスプレイと組み合わせて感情を表現。', '感情分析SNSアプリ:スマートフォン上で感情を自動的に分析し、ユーザーの感情をカラフルなインターフェースで表示。バイオメトリクスセンサーと連携してリアルタイムの感情共有が可能。エモーショナルVR:VRヘッドセットを使用して、感情認識技術と音声ガイ ドを組み合わせ、プロフェッショナルに設計された仮想現実体験を提供。', 'バイオメトリクスインタラクション:感情認識とバイオメトリックデータを活用し、ユーザーがVR内で特 定の動作をすることによって感情が反映されるインタラクションを提供。']
Evaluate:1.非常に悪い 2.悪い 3.やや悪い 4.普通 5.やや良い 6.良い 7.とても良い 8.素晴らしい 9.非常に素晴らしい 10.類稀なる素晴らしさ'''},
                    {"role": "assistant", "content": '''評価:
感情シェアステッカー:スマートフォンに貼ることがで きるステッカーで感情を表現する。嗅覚カプセルが内蔵されており、特定の香りを放出。カラフルなデザインで感情を視覚化。
総合評価6、独創性7、実現可能性7、感情的影響力6、ユーザーエンゲージメント5、ユーザーエクスペリエンス6
感情リアルタイムフィードバック:スマートフォン のバイオメトリクスセンサーを使用して、ユーザーの感情をリアルタイムに分析し、香りやカラフルなディスプレイを用いたフィードバックを提供。 
総合評価7、独創性6、実現可能性8、感情的影響力7、ユーザーエンゲージメント7、ユーザーエクスペリエンス7
感情音楽プレーヤー:スマー トフォン上で再生される音楽をユーザーの感情に合わせて自動的に調整。バイオメトリクスセンサーを使用して感情を検出し、香りやカラフルなディスプレイと組み合わせて感情を表現。 
総合評価8、独創性8、実現可能性7、感情的影響力8、ユーザーエンゲージメント8、ユーザーエクスペリエンス8
感情分析SNSアプリ:スマートフォン上で感情を自動的に分析し、ユーザーの感情をカラフルなインターフェースで表示。バイオメトリクスセンサーと連携してリアルタイムの感情共有が可能。
総合評価7、独創性7、実現可能性8、感情的影響力8、ユーザーエンゲージメント7、ユーザーエクスペリエンス7
エモーショナルVR:VRヘッドセットを使用して、感情認識技術と音声ガイ ドを組み合わせ、プロフェッショナルに設計された仮想現実体験を提供。
総合評価8、独創性9、実現可能性7、感情的影響力9、ユーザーエンゲージメント8、ユーザーエクスペリエンス9
バイオメトリクスインタラクション:感情認識とバイオメトリックデータを活用し、ユーザーがVR内で特 定の動作をすることによって感情が反映されるインタラクションを提供。
総合評価8、独創性8、実現可能性8、感情的影響力8、ユーザーエンゲージメント9、ユーザーエクスペリエンス8'''},
                    {"role":"user","content":f'''Guidelineを実行してください。Guideline:1.(Idea)に記載された(issue)を解決するアイデアのリストを確認してください。
各アイデアは「アイデア名1:説明1,アイデア名2:説明2,..」のように区切られているので、どこまでが1つのアイデアなのか自動で判断してください。
2.(eval_item)に基づいて(Idea)のアイデアを1から10まで評価してください。また、総合評価も1から10までの10段階で行ってください。評価は(Evaluate)に基づいて行いましょう。
Issue:{prompt}
Idea:{splitted_lists[count]}
eval_item:{eval_item}
Evaluate:1.非常に悪い 2.悪い 3.やや悪い 4.普通 5.やや良い 6.良い 7.とても良い 8.素晴らしい 9.非常に素晴らしい 10.類稀なる素晴らしさ'''}
])
            count+=1
            evaluates+=response.choices[0].message.content.lstrip('評価:')
        print('アイデア評価一覧:\n',evaluates)
        ideas =re.split("\d+\n+",evaluates.strip())
        ideas_dict = []
        for idea in ideas:
            name, detail = idea.split(":")[0], ":".join(idea.split(":")[1:])  # アイデア名と詳細を分割
            detail.strip(':')
            detail, scores = detail.strip(':').rsplit('\n',1)  # 詳細と評価を分割
            scores_dict = dict(re.findall(r"(\w+)(\d+)",re.sub(':\s+','',scores).replace(':','')))  # 各評価を辞書に変換
            total_score = int(scores_dict['総合評価']) * 2 + int(scores_dict['独創性'])  # 合計点数を計算
            ideas_dict.append({'name': name, 'detail': detail, 'total_score': total_score})
        print('\nstep3-2 アイデアの厳選:')
        ideas_dict = sorted(ideas_dict, key=lambda x: x['total_score'], reverse=True)  # 合計点数で降順にソート
        ideas_dict = ideas_dict[:selection1]
        
        #part3　距離の近いものを排除
        print('\nstep3-3 似ているアイデアの削除:')
        part3_strings=[]
        part3_strings=[idea['name']+':'+idea['detail']for idea in ideas_dict]
        embeddings = []
        #初期値0 削除予定なら1
        marks=[0]*selection1
        n=len(part3_strings)
        for i in range(n):
            response = openai.Embedding.create(input=part3_strings[i], model="text-embedding-ada-002")
            embeddings.append(response['data'][0]['embedding'])
    
        cos_sim_pairs = [(i, j, cos_sim(embeddings[i], embeddings[j])) 
                 for i in range(len(embeddings)) 
                 for j in range(i+1, len(embeddings))]
        cos_sim_pairs.sort(key=lambda x: x[2], reverse=True)
        print('(ペア1,ペア2,コサイン類似度)')
        for pair in cos_sim_pairs:
            count=0
            print(pair)
            for mark in marks:
                if mark==0:
                    count+=1
            if count<=selection2:
                break
            if marks[pair[0]]==0 and marks[pair[1]]==0:
                marks[pair[1]]=1

        copy_ideas_dict=[]
        count=0
        for mark in marks:
            if mark==0:
                copy_ideas_dict.append(ideas_dict[count])
            count+=1
        print('\n最終アイデア:')
        for idea in copy_ideas_dict:
            print(idea)
        session['list']=copy_ideas_dict
        return redirect(url_for('end'))
    return render_template('form.html')

@app.route('/end', methods=['GET'])
def end():
    temp_list = session.get('list')
    temp_prompt = session.get('prompt')
    return render_template('end.html',list=temp_list,prompt=temp_prompt)

if __name__ == "__main__":
    app.run(debug=True)


